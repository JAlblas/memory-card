{"version":3,"sources":["Scoreboard.js","Card.js","Gameboard.js","App.js","reportWebVitals.js","index.js"],"names":["Scoreboard","props","id","highscore","score","Card","className","onClick","handleClick","src","image","alt","description","a","fetch","process","response","status","console","log","json","Gameboard","useState","cards","setCards","selectedCards","setSelectedCards","useEffect","localStorage","getItem","selectCards","JSON","parse","getCardData","then","data","filteredData","Classic","filter","card","img","setItem","stringify","catch","e","cardsInput","newCards","maxStartIndex","length","startIndex","Math","floor","random","slice","cardId","target","includes","resetGame","newSelectedCards","push","incrementScore","tempCards","i","j","temp","randomizeCards","map","name","text","App","setScore","setHighscore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97f49d3d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Scoreboard = (props) => {\n    return (<div id=\"scoreboard\">\n        <p>High score: {props.highscore}</p>\n        <p>Current score: {props.score}</p>\n    </div>)\n}\n\nexport default Scoreboard;","import React from \"react\";\n\nconst Card = (props) => {\n\n    return (<div className=\"card\" onClick={props.handleClick}>\n        <img src={props.image} alt={props.description} id={props.id}></img>\n    </div>); \n    \n}\n\n\nexport default Card;","import React, { useState, useEffect } from \"react\";\nimport Card from './Card';\n\nasync function getCardData() {\n\n    const response = await fetch(\"https://omgvamp-hearthstone-v1.p.rapidapi.com/cards\", {\n        \"method\": \"GET\",\n        \"headers\": {\n            \"x-rapidapi-key\": process.env.REACT_APP_API_KEY ,\n            \"x-rapidapi-host\": \"omgvamp-hearthstone-v1.p.rapidapi.com\"\n        }\n    })\n    if (response.status === 400) {\n        console.log(\"Error!\");\n        //throwErrorMsg();\n    } else {\n        return await response.json();\n    }\n}\n\nconst Gameboard = (props) => {\n\n    const [cards, setCards] = useState([]);\n    const [selectedCards, setSelectedCards] = useState([]);\n\n    useEffect(() => {\n        if(!localStorage.getItem('cards')) {\n            getCardData().then((data) => {\n                let filteredData = data.Classic.filter(card => card.img);\n                localStorage.setItem('cards', JSON.stringify(filteredData));\n                selectCards(filteredData);\n            }).catch(e => console.log(e));\n          } else {\n            selectCards(JSON.parse(localStorage.getItem('cards')));\n          }\n\n    }, []);\n\n    const selectCards = (cardsInput) => {\n        let newCards = [...cardsInput];\n        let maxStartIndex = newCards.length - 10;\n        let startIndex = Math.floor(Math.random() * maxStartIndex);\n        setCards(newCards.slice(startIndex, startIndex + 10));\n    }\n    \n    const randomizeCards = () => {\n        let tempCards = [...cards];\n        for (let i = tempCards.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * i);\n            let temp = tempCards[i];\n            tempCards[i] = tempCards[j];\n            tempCards[j] = temp;\n        }        \n        setCards(tempCards);\n    };\n\n    const handleClick = (e) => {\n        let cardId = e.target.id;\n        if (selectedCards.includes(cardId)) {\n            setSelectedCards([]);\n            props.resetGame();\n            selectCards(JSON.parse(localStorage.getItem('cards')));\n        } else {\n            let newSelectedCards = [...selectedCards];\n            newSelectedCards.push(cardId);\n            setSelectedCards(newSelectedCards);\n            props.incrementScore();\n            randomizeCards();\n        }        \n    };\n\n    if (cards.length === 0) {\n        return <p>Loading cards...</p>;\n    }\n    return (\n        <div>\n            <div id=\"gameboard\">\n                {cards.map(card => (\n                    <Card\n                    handleClick={handleClick}\n                    id={card.cardId}\n                    key={card.cardId}\n                    name={card.name}\n                    image={card.img}\n                    text={card.text}\n                    />\n                ))\n                }\n            </div>\n        </div>\n\n\n    )\n}\n\nexport default Gameboard;","\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport Scoreboard from './Scoreboard';\nimport Gameboard from './Gameboard';\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [highscore, setHighscore] = useState(0);\n\n  useEffect(() => {\n    console.log(\"is this running?\")\n    console.log(score, highscore);\n    if (score > highscore) {\n      setHighscore(score);\n    }\n  }, [score]);\n\n  const incrementScore = () => {\n    setScore(score + 1);\n  };\n\n  const resetGame = () => {\n    setScore(0);\n  }\n\n  return (\n    <div className=\"App\">\n      <Scoreboard score={score} highscore={highscore}/>\n      <Gameboard incrementScore={incrementScore} resetGame={resetGame}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}